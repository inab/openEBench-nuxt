export const indicatorsExplanation = {
	F1: {
		what: 'Whether the software has a proper, unique and persistent identifier. The uniqueness of an identifier is necessary to unambiguously refer to that resource and that resource alone.',
	},
	F1_1: {
		what: 'Whether the software has a unique name to identify it that sets it apart from others.',
		why: 'The name is commonly used as the primary identifier of software. Each tool should have a unique name to avoid ambiguities. Different versions of the same software should share a name, but if substantial modifications are done, the identifier should change for the new piece of software.',
		how: 'A name is valid.  ',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	F1_2: {
		what: 'Whether there is a scheme to uniquely and properly identify the software version.',
		why: 'A clear and consistent versioning scheme is crucial for distinguishing between different software releases, enabling precise communication and effective update management while also aiding in tracking incremental changes, thus ensuring that users can easily reference, use, and provide feedback on specific versions.',
		how: 'A version of the form X.X is considered valid',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	F2: {
		what: 'Whether the software is described with rich metadata, including scientific applicability. Metadata makes it possible to find tools through search engines and to decide if they are of interest.',
	},
	F2_1: {
		what: 'Metadata is adjusted to specific metadata formats.',
		why: "Using specific, structured metadata formats enhances machine readability, which not only increases the software's findability by search engines but also improves interoperability and facilitates the accurate extraction and utilisation of data, thereby boosting its usability and accessibility for both humans and machines.",
		how: 'Any source of structured metadata (e.g. JSON, XML, YAML) is considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	F2_2: {
		what: 'Metadata is described using accepted ontologies.',
		why: 'Standardised metadata using consensual terminology simplifies the interpretation and automated processing of software descriptions by ensuring a uniform approach to information representation. This uniformity enhances search efficiency and accuracy, making finding software with specific features easier and faster.',
		how: 'Use of EDAM and/or Bioschemas to describe the software is considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	F3: {
		what: 'How software can be found. There are multitude of mechanisms for scientists looking to find specific software',
	},
	F3_1: {
		what: 'Whether software is included in the main software registries.',
		why: 'Software registries serve as primary resources for users seeking specific resources, and ensuring software is discoverable in these registries enhances visibility, facilitates peer recognition, and increases the potential for adoption and collaboration.',
		how: 'At least one software registry among the metadata sources is considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	F3_2: {
		what: 'Whether software can be found in any of the major software repositories.',
		why: 'Users can use software repositories as additional resources when looking for research software. Listing software in repositories such as GitHub and GitLab enhances its visibility and accessibility, making it easier for scientists to find, use, and contribute to software development.',
		how: 'An associated software repository (GitHub, GitLab or Bitbucket) is considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	F3_3: {
		what: 'The software can be found in specialised literature services.',
		why: 'Specialised scientific literature serves as a crucial reference for finding software, particularly new ones, as it not only enhances visibility and credibility but also provides detailed context and validation through citations and reviews, including the ones by peers.',
		how: 'At least one associated publication is considered valid. ',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	A1: {
		what: 'Whether it is possible to access/download/build a working version of the software. Being able to access the software as a user is the central aspect of Accessibility.',
	},
	A1_1: {
		what: 'Whether it is possible to access a working version of the software through an API or web interface.',
		why: "Providing an API or web interface allows remote access with just an internet connection, greatly enhancing the software's usability, facilitating integration with other systems, and enabling a broader range of users to benefit from its features without complex installations.",
		how: 'A working URL is considered valid.',
		types: ['web'],
		measured: true,
		note: '',
	},
	A1_2: {
		what: 'Whether it is possible to access/download/build a working version of the software including the generation of a software container.',
		why: 'A downloadable and buildable version of the research software significantly increases its freedom of use and usability. It allows users to install and run the software where and as needed, e.g. to use locally and in/as modules.',
		how: 'At least one download working link is considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	A1_3: {
		what: 'Whether there is a set of instructions and other necessary information that the user can follow to build the software.',
		why: 'Clear installation instructions are essential for ensuring successful software setup, reducing installation and deployment time, minimising potential errors, and enhancing overall user experience.',
		how: 'A link explicitly stated as installation instructions or manual, instructions on the web if Bioconductor package, and availability through Galaxy ToolShed are all considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	A1_4: {
		what: 'Whether test data is available.',
		why: "Test data confirms the software's functionality and provides users with practical examples for setting up their own datasets, thereby increasing usability and ensuring robustness.",
		how: 'At least one piece of test data is considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	A1_5: {
		what: 'Whether software source code is available.',
		why: 'The availability of source code allows users to compile the software on various operating systems, address installation challenges, manage dependencies, and customise the code to meet specific needs, enhancing adaptability and user control.',
		how: 'A link explicitly stated as source code is considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	A2: {
		what: 'Whether code and metadata are available even when the software is no longer in use. To match software provenance with analysed data provenance.',
	},
	A2_1: {
		what: 'Whether there is available metadata of previous versions.',
		why: 'Maintaining metadata for previous software versions in repositories ensures the traceability of changes and updates, offering insights into the evolution of the software and facilitating the understanding of its historical context and development.',
		how: 'Not measured, because there is no way to systematically measure this.',
		types: ['web', 'non-web'],
		measured: false,
		note: '',
	},
	A2_2: {
		what: 'Whether there are available previous versions.',
		why: 'Accessibility to previous software versions allows users to reproduce analyses with a given software version.',
		how: 'Not measured, because there is no way to systematically measure this.',
		types: ['web', 'non-web'],
		measured: false,
		note: '',
	},
	A3: {
		what: 'Whether the software lacks restrictions in terms of authorization and infrastructure/platform needed to use it. Unrestricted access removes entry barriers and ensures that a wider audience can use the software without facing restrictive conditions or platform limitations.',
	},
	A3_1: {
		what: 'Whether software can be used without registration.',
		why: 'Eliminating mandatory registration enhances accessibility by allowing users to access and utilise the software anonymously, removing potential privacy concerns and lowering entry barriers.',
		how: 'There is no need to register to use the software.',
		types: ['web', 'non-web'],
		measured: true,
		note: 'This indicator is not measured for the population of software in the database because it is not possible to systematically measure it. Thus, to allow comparisons, it is not reflected in the score of this tool in the plot.',
	},
	A3_2: {
		what: 'Whether the software can be used in a free operating system.',
		why: 'Providing software versions for open-source operating systems removes economic barriers, making research software accessible to a broader audience who may not have the resources for costly proprietary systems.',
		how: 'GNU, Linux, FreeBSD among the compatible operating systems is considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	A3_3: {
		what: 'Whether there are versions of the software for several operative systems.',
		why: 'Supporting multiple operating systems makes the software more accessible to users with diverse needs, constraints, and preferences, especially in scenarios where specific hardware systems like clusters or supercomputers are required.',
		how: 'The existence of software versions for at least two operating systems is considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	A3_4: {
		what: 'Whether the software can be used through publicly available e-infrastructure.',
		why: 'Making software available on publicly available e-infrastructures removes significant barriers to use by providing computational resources accessible via a web browser, eliminating the need for local installation or infrastructure investment, thereby broadening accessibility to a wide range of users regardless of their technical or financial resources.',
		how: 'A Galaxy public server or VRE (Virtual Research Environment) link is considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	A3_5: {
		what: 'Whether the software can be used in several e-infrastructure.',
		why: 'Users usually use e-infrastructures to build workflows. The e-infrastructure they choose to use, thus, depends on software being available in the same platform and other factors. The more e-infrastructures a software is available, the greater the likelihood a user will be able to use it.',
		how: 'At least two Galaxy public server or VRE (Virtual Research Environment) links are considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	I1: {
		what: 'Whether the software adheres to data format standards and its operational practices concerning data handling it encompasses standard formats and APIs, the flexibility and verifiability of these formats, and the tracking of data provenance.',
	},
	I1_1: {
		what: 'Whether the input and output data types are formally specified and related to accepted ontologies.',
		why: 'Using standard data formats minimises the need for error-prone and resource-intensive transformations to meet unique software input requirements. It facilitates collective efforts to develop high-quality data management tools, reducing reliance on ad hoc data transformations.',
		how: 'At least one input or output data format specified in the EDAM format ontology is considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	I1_2: {
		what: 'Whether APIs (REST, libraries) are documented in a standard framework.',
		why: 'Documenting APIs in a standard framework ensures they are universally understandable and easily integrable across different platforms and services.',
		how: 'An API specification URL is provided among the documentation.',
		types: ['web'],
		measured: true,
		note: 'This indicator is not measured for the population of software in the database because it is not possible to systematically measure it. Thus, to allow comparisons, it is not reflected in the score of this tool in the plot.',
	},
	I1_3: {
		what: 'Whether input/output data are specified using verifiable schemas.',
		why: 'Verifiability of data formats is crucial as it allows users to automatically confirm that their data complies with accepted standards, ensuring compatibility and readability by other systems using the same format. This verification reduces errors in data processing and enhances overall system interoperability.',
		how: 'Any standard formats (I1.1) plus JSON, XML, RDF and XDS  are considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	I1_4: {
		what: 'Whether the software allows one to choose among various input/output data formats or provides the necessary mechanisms to convert other standard formats into the supported ones.',
		why: 'Supporting various data formats directly in software eliminates the need for data transformations, thereby reducing error points and saving significant time and resources for users, enhancing flexibility and efficiency.',
		how: 'At least two input or output data formats are valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	I1_5: {
		what: 'Whether the software provides provenance information according to accepted standards.',
		why: 'Generating provenance information is crucial for adhering to the FAIR data principles, as it provides detailed documentation that enhances data transparency, traceability, and trustworthiness, thereby supporting improved data management.',
		how: 'Not measured, because there is no way to systematically measure this.',
		types: ['web', 'non-web'],
		measured: false,
		note: '',
	},
	I2: {
		what: 'Whether software can be easily integrated into workflows or used in connection with other software. Research software is usually used with other software as part of a workflow or any other composition.',
	},
	I2_1: {
		what: "Whether the software has an API/library version to be included in users' workflows.",
		why: 'Providing software as modular libraries or well-defined APIs is crucial for seamless integration into larger systems or workflows, ensuring compatibility and functionality across various platforms and environments.',
		how: 'A library or API version of the software is available.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	I2_2: {
		what: 'Whether the software can be deployed in e-infrastructures.',
		why: 'Compatibility with e-infrastructures is critical, as researchers and professionals extensively use these platforms to build data processing pipelines. If software cannot be deployed on these infrastructures, it risks being inaccessible to many potential users, limiting its utility and adoption in essential workflows.',
		how: 'The software is available at the Galaxy Toolshed.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	I3: {
		what: 'Whether dependencies are documented and mechanisms to obtain them exist. Software dependencies are essential for it to function properly. ',
	},
	I3_1: {
		what: 'Whether the software includes details about dependencies.',
		why: 'A clear dependencies statement informs users about the additional software required to operate the main software effectively. This transparency helps ensure that all necessary components are installed, facilitating a smoother setup and experience.',
		how: 'At least one dependency is stated.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	I3_2: {
		what: 'Whether the software includes its dependencies or mechanisms to access them.',
		why: 'Providing dependencies along with the software can significantly enhance user experience by minimising the steps needed for installation. This method helps to eliminate common setup obstacles, facilitating a more streamlined and error-free user experience.',
		how: 'The software is available at, at least, one of the following: Bioconductor, Bioconda, Galaxy, Conda, PyPI, CRAN, npm, CPAN, RubyGems, BioJS, DockerHub, GitHub Container Registry, GitLab Container Registry, or BioContainers.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	I3_3: {
		what: 'Whether the software is distributed via a dependencies-aware system.',
		why: 'Ensuring software availability through dependencies-aware systems like package managers enhances accessibility and ease of installation. This feature allows users to efficiently manage software and its dependencies, improving reliability and reducing compatibility issues across different environments.',
		how: 'The software is available at, at least, one of the following: Bioconductor, Bioconda, Galaxy, Conda, PyPI, CRAN, npm, CPAN, RubyGems, BioJS.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	R1: {
		what: "Whether software provides adequate usage documentation. Usage documentation such as tutorials, use guides, examples of user cases, and 'how to' allow users to properly and effectively use the software.",
	},
	R1_1: {
		what: 'Whether software user guides are provided.',
		why: 'User guides provide comprehensive information for users to understand and use the software. These guides help ensure users can fully exploit the software’s capabilities, leading to better user experience and reduced support queries.',
		how: 'Any documentation except news, license and terms of use is considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	R1_2: {
		what: 'Whether examples of use cases are provided.',
		why: 'Usage examples demonstrate practical applications of the software, providing detailed clarity that complements the broader information in user guides and enhances overall understanding.',
		how: 'There are examples of use cases among the documentation.',
		types: ['web', 'non-web'],
		measured: true,
		note: 'This indicator is not measured for the population of software in the database because it is not possible to systematically measure it. Thus, to allow comparisons, it is not reflected in the score of this tool in the plot.',
	},
	R2: {
		what: 'Whether a clear and accessible usage license is provided. ',
	},
	R2_1: {
		what: 'Terms of Use are stated',
		why: 'Clearly stated terms of use ensure that users are fully aware of the conditions and limitations of software usage before its adoption, promoting transparency and informed decision-making.',
		how: 'Terms of use or license are considered valid.',
		types: ['web'],
		measured: true,
		note: '',
	},
	R2_2: {
		what: 'Whether conditions of installation and use are stated.',
		why: 'The existence of clearly defined conditions of use is essential, as it ensures users understand and agree to the terms under which software can be utilised before they begin using it, fostering transparency and compliance.',
		how: 'Conditions of use or license are considered valid.',
		types: ['non-web'],
		measured: true,
		note: '',
	},
	R3: {
		what: 'Whether there are policies governing contributor roles and systems in place for acknowledging their contributions ensuring fair and transparent collaboration within software projects.',
	},
	R3_1: {
		what: "Whether a document stating the contributor's policy exists.",
		why: "A specified contributors policy is crucial because it provides external developers with the necessary guidelines for contributing, facilitating their involvement and enhancing the software's development and improvement.",
		how: 'A contributors policy URL is provided among the documentation.',
		types: ['web', 'non-web'],
		measured: true,
		note: 'This indicator is not measured for the population of software in the database because it is not possible to systematically measure it. Thus, to allow comparisons, it is not reflected in the score of this tool in the plot.',
	},
	R3_2: {
		what: 'Whether credit for contributions is provided.',
		why: "Credit is essential as it acknowledges contributors' intellectual property rights and ensures their contributions are appropriately recognised under existing regulations and towards the overall research community.",
		how: 'Authors are considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	R4: {
		what: 'How effectively the software manages version control and documents historical changes, ensuring clear updates traceability and consistency in release practices for enhanced reliability, sustainability and auditability',
	},
	R4_1: {
		what: 'Whether the software follows a version-control system.',
		why: 'Using version control is crucial as it systematically records and tracks changes to the software, making it easier to manage updates and trace modifications over time.',
		how: 'A software repository hosted in GitHub, Bitbucket or GitLab is considered valid.',
		types: ['web', 'non-web'],
		measured: true,
		note: '',
	},
	R4_2: {
		what: 'Whether the software follows a defined and documented release policy.',
		why: 'A clear release policy is essential because it informs users about the changes and improvements between software versions, enabling them to understand updates and make informed decisions about upgrades.',
		how: 'A release policy URL is provided among the documentation.',
		types: ['web', 'non-web'],
		measured: true,
		note: 'This indicator is not measured for the population of software in the database because it is not possible to systematically measure it. Thus, to allow comparisons, it is not reflected in the score of this tool in the plot.',
	},
	R4_3: {
		what: 'Whether there is available metadata of previous versions.',
		why: 'Maintaining metadata of previous versions in software repositories is crucial because it ensures users can verify the existence and specifics of past software versions, particularly those referenced in published research, thereby providing essential context and supporting reproducibility.',
		how: 'Not measured, because there is no way to systematically measure this.',
		types: ['web', 'non-web'],
		measured: false,
		note: '',
	},
};

export default {};
/*
template: 
{ 
    what: "",
    why: "", 
    how: "",
    types: []
},

*/
